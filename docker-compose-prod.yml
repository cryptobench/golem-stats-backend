version: '3.8'
volumes:
  db_data: {}
  pgadmin:
services:
  traefik:
    image: traefik:latest
    ports:
      - '80:80'
      - '443:443'
    command:
      - '--providers.docker=true'
      - '--providers.docker.swarmmode=true'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.web-secure.address=:443'
      - '--certificatesresolvers.letsencryptresolver.acme.httpchallenge=true'
      - '--certificatesresolvers.letsencryptresolver.acme.httpchallenge.entrypoint=web'
      - '--certificatesresolvers.letsencryptresolver.acme.email=phillip@golem.network'
      - '--certificatesresolvers.letsencryptresolver.acme.storage=/letsencrypt/acme.json'
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=swarm-example'
      - 'traefik.http.routers.traefik.middlewares=traefik-compress'
      - 'traefik.http.middlewares.traefik-compress.compress=true'

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    deploy:
      placement:
        constraints:
          - node.role == manager
    networks:
      - swarm-example
  webserver:
    build:
      context: .
      dockerfile: compose/django/Dockerfile
    image: webserver:latest
    depends_on:
      - postgres
    volumes:
      - './stats-backend:/stats-backend/'
      - './wait-for-it.sh:/wait-for-it.sh'
    env_file:
      - ./.envs/.django
    deploy:
      labels:
        - 'traefik.enable=true'
        - 'traefik.http.routers.webserver.rule=Host(`api.golemstats.com`)'
        - 'traefik.http.routers.webserver.entrypoints=web'
        - 'traefik.http.services.webserver.loadbalancer.server.port=8002'
        - 'traefik.http.routers.webserver.service=webserver@docker'
        - 'traefik.docker.network=swarm-example'
        - 'traefik.http.middlewares.webserver_compress.compress=true'
        - 'traefik.http.routers.webserver.middlewares=webserver_compress'
        - 'traefik.http.routers.webserver.tls.certresolver=letsencryptresolver'
        - 'traefik.http.middlewares.webserver-redirect-web-secure.redirectscheme.scheme=https'
        - 'traefik.http.routers.webserver-web.middlewares=webserver-redirect-web-secure'
        - 'traefik.http.routers.webserver-web-secure.rule=Host(`api.golemstats.com`)'
        - 'traefik.http.routers.webserver-web-secure.tls=true'
        - 'traefik.http.routers.webserver-web-secure.entrypoints=web-secure'
      replicas: 3
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  redis:
    image: 'redis:alpine'
    expose:
      - '6379'
    deploy:
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  celery:
    build:
      context: .
      dockerfile: compose/celery/Dockerfile
    image: celery_wtf:latest
    volumes:
      - './stats-backend:/stats-backend/'
      - './wait-for-it.sh:/wait-for-it.sh'
    env_file:
      - ./.envs/.django
    depends_on:
      - redis
      - postgres
      - webserver
    healthcheck:
      test: curl 127.0.0.1:7465/me || exit 1
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      replicas: 3
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  celery_beat:
    build:
      context: .
      dockerfile: compose/celery/Dockerfile
    image: celery_beat:latest
    command: celery -A core beat -l INFO
    volumes:
      - './stats-backend:/stats-backend/'
      - './wait-for-it.sh:/wait-for-it.sh'
    env_file:
      - ./.envs/.django
    depends_on:
      - redis
      - postgres
      - webserver
    healthcheck:
      test: curl 127.0.0.1:7465/me || exit 1
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  postgres:
    image: postgres
    build:
      context: .
      dockerfile: compose/postgres/Dockerfile
    env_file:
      - ./.envs/.db
    volumes:
      - 'db_data:/var/lib/postgresql/data'
    networks:
      - swarm-example
  # pgadmin:
  #   image: dpage/pgadmin4
  #   links:
  #     - postgres
  #   depends_on:
  #     - postgres
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: 123@123.com
  #     PGADMIN_DEFAULT_PASSWORD: 123
  #   volumes:
  #     - pgadmin:/var/lib/pgadmin
  #   ports:
  #     - '5050:80'
  frontend:
    build:
      context: .
      dockerfile: compose/frontend/Dockerfile
    image: frontend_golemstats:latest
    volumes:
      - './golemstats-frontend:/app'
      - '/app/node_modules'
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.frontend.rule=Host(`golemstats.com`)
        - traefik.http.services.frontend.loadbalancer.server.port=80
        - traefik.http.routers.frontend.service=frontend@docker
        - traefik.http.routers.frontend.entrypoints=web
        - traefik.docker.network=swarm-example
        - traefik.http.routers.frontend.tls.certresolver=letsencryptresolver
        - traefik.http.middlewares.frontend-redirect-web-secure.redirectscheme.scheme=https
        - traefik.http.routers.frontend-web.middlewares=frontend-redirect-web-secure
        - traefik.http.routers.frontend-web-secure.rule=Host(`golemstats.com`)
        - traefik.http.routers.frontend-web-secure.tls=true
        - traefik.http.routers.frontend-web-secure.entrypoints=web-secure
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
networks:
  swarm-example:
    driver: overlay
