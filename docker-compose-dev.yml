version: "3.8"
volumes:
  db_data: {}
  pgadmin:
  prometheus_data: {}
  grafana_data: {}
services:
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    networks:
      - swarm-example
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)
        - traefik.http.routers.prometheus.entrypoints=web
        - traefik.http.services.prometheus.loadbalancer.server.port=9090
        - traefik.http.routers.prometheus.service=prometheus@docker
        - traefik.docker.network=swarm-example
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    networks:
      - swarm-example
    user: "104"
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.grafana.rule=Host(`grafana.localhost`)
        - traefik.http.routers.grafana.entrypoints=web
        - traefik.http.services.grafana.loadbalancer.server.port=3000
        - traefik.http.routers.grafana.service=grafana@docker
        - traefik.docker.network=swarm-example
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  traefik:
    image: traefik:latest
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    command:
      - "--providers.docker=true"
      - "--providers.docker.swarmmode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--pilot.token=${PILOT_TOKEN}"
      - --metrics.prometheus.entryPoint=metrics
      - --entryPoints.metrics.address=:8080
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=swarm-example"
      - "traefik.http.routers.traefik.middlewares=traefik-compress"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    env_file:
      - ./.envs/.traefik
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager
    networks:
      - swarm-example
  webserver:
    build:
      context: .
      dockerfile: compose/django/Dockerfile
    image: webserver:latest
    volumes:
      - "./stats-backend:/stats-backend/"
      - "./wait-for-it.sh:/wait-for-it.sh"
    env_file:
      - ./.envs/.django
    deploy:
      # labels:
      #   - traefik.enable=true
      #   - traefik.http.routers.webserver.rule=Host(`api.localhost`)
      #   - traefik.http.routers.webserver.entrypoints=web
      #   - traefik.http.services.webserver.loadbalancer.server.port=8002
      #   - traefik.http.routers.webserver.service=webserver@docker
      #   - traefik.docker.network=swarm-example
      replicas: 1
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  redis:
    image: "redis:alpine"
    command: [sh, -c, "rm -f /data/dump.rdb && redis-server --maxclients 40000 --timeout 60  --save ''"]
    expose:
      - "6379"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  celery:
    build:
      context: .
      dockerfile: compose/celery/Dockerfile
    image: celery_worker:latest
    volumes:
      - "./stats-backend:/stats-backend/"
      - "./wait-for-it.sh:/wait-for-it.sh"
      - "./check_yagna.sh:/check_yagna.sh"
    env_file:
      - ./.envs/.django
    healthcheck:
      test: /check_yagna.sh || exit 1
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 15s
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  celery_beat:
    build:
      context: .
      dockerfile: compose/celery/Dockerfile
    image: celery_beat:latest
    command: celery -A core beat -l INFO
    volumes:
      - "./stats-backend:/stats-backend/"
      - "./wait-for-it.sh:/wait-for-it.sh"
    env_file:
      - ./.envs/.django
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: on-failure
    networks:
      - swarm-example
  postgres:
    image: postgres
    build:
      context: .
      dockerfile: compose/postgres/Dockerfile
    env_file:
      - ./.envs/.db
    volumes:
      - "db_data:/var/lib/postgresql/data"
    networks:
      - swarm-example
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: on-failure
  # frontend:
  #   build:
  #     context: .
  #     dockerfile: compose/frontend/Dockerfile
  #   image: frontend_golemstats:latest
  #   volumes:
  #     - "./golemstats-frontend:/app"
  #     - "/app/node_modules"
  #     - "./nginx.conf:/etc/nginx/conf.d/default.conf"
  #     - "./golemstatssitemap.xml:/crawler/sitemap.xml"
  #     - "./robots.txt:/crawler/robots.txt"
  #     - "./staticfiles:/staticfiles"
  #   deploy:
  #     labels:
  #       - traefik.enable=true
  #       - traefik.http.routers.frontend.rule=Host(`frontend.localhost`)
  #       - traefik.http.services.frontend.loadbalancer.server.port=80
  #       - traefik.http.routers.frontend.service=frontend@docker
  #       - traefik.http.routers.frontend.entrypoints=web
  #       - traefik.docker.network=swarm-example
  #     replicas: 1
  #     update_config:
  #       parallelism: 1
  #       failure_action: rollback
  #       delay: 10s
  #     restart_policy:
  #       condition: on-failure
  #   networks:
  #     - swarm-example
networks:
  swarm-example:
    driver: overlay
